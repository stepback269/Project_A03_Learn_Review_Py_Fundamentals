import inspect
import sys
import os
import keyboard             #--- enable single key press inputs
import pyautogui as gu      #--- enable cursor control
import webbrowser           #--- enable opening up desired URL's for learning frames
import pyperclip            #--- enable use of clipboard
#import random
from random import choice   #--- enable random choice() method
from random import shuffle   #--- enable random shuffle() method

from Package_03 import vars_01 as v  #-- google "python syntax of an import from statement"
from Package_03 import mssgs_01 as msg
from Package_03 import funcs_01 as fn

os.system('cls')        #clear the screen using https://www.naukri.com/code360/library/how-to-clear-a-screen-in-python
print(f'\n', '*'*60,'\n')
#fn.clear_d_screen()
#breakpoint()

print(f'Date: 9/16b/2025  --Status: My experience as student in {v.yy_}Real Python{v.W_} course re LIST deep dive')
print(f' URL= https://realpython.com/videos/getting-started-lists/\n')
print(f'\t\tSee also {v.yy_}Geeks for Geeks{v.W_} re Lists at below ')
print(f' URL= https://www.geeksforgeeks.org/python/python-lists/\n')
print(f'\t\tAlso connect to {v.yy_}OLD MAN BACK PAGES{v.W_} USING THE LINK below ')
print(f' URL= https://oldmanlearningsupport.blogspot.com\n')
print(f'\t\tFurther see Metcalfe tutorial re {v.yy_}If Else in a List Comprehension{v.W_} USING THE LINK below ')
print(f' URL= https://www.youtube.com/watch?v=EL--NjvBw6o\n')

print('\n', '*'*40, '\n')
print(f'LEARNING TO WORK WITH LISTS')
print(f'Main Concepts = CREATION --> ANATOMY --> CHANGE --> SKILLS')
print(f'{v.yy_}Creation = (1) via Literals, (2) via LIST() function, (3) via Comprehension{v.W_}\n\n')

#(1a)
my_1st_list = ['strng_1', 172, 10.03, [0.1, 2, 3]]
print(f'(1a) CREATION {v.yy_}example of a heterogeneiuos list{v.W_} generated with literals is this \n\t{my_1st_list}\n')

#(1b)
my_1st_list_ = ['strng_1', 'strng_2', 'strng_3', 'strng_4']
print(f'(1b) Creation {v.yy_}example of a homogeneiuos list{v.W_} generated with literals is this \n\t{my_1st_list_}')
print(f'Type of item 0 in the list is {type(my_1st_list_[0])}')
print(f'{v.yy_}Type of item 3{v.W_} in the list is {type(my_1st_list_[3])}\n')

#(2)
#creation via passing in an iterable  sequence, e.g a string, to the list() function
my_2nd_list = list('ABCDEFGHIJ')
print(f'\n (2) Creation example of list {v.yy_}generated with list() func getting a string{v.W_}  is this \n\t{my_2nd_list}\n')

#(3a)
#creation via passing in a tuple to the list() function
my_3rd_list = list((5, 6, 7, 8, 9, 10))
print(f'\n (3a) Creation example of list generated {v.yy_}with list() func getting a  Tuple{v.W_}  is this \n\t{my_3rd_list}\n')

#(3b)
#creation via passing in a tuple to the list() function
my_3rd_list_ = list({5, 6, 7, 8, 9, 10})
print(f'\n (3b) Creation example of list generated {v.yy_}with list() func getting a  Set{v.W_}  is this \n\t{my_3rd_list_}\n')

#(4a-b)
#creation via list comprehensions
my_4th_list = [j**2 for j in range(13)]
print(f'\n (4a) Creation example of list generated {v.yy_}with list comprehension {v.W_}  is this \n\t{my_4th_list}\n')

my_4th_list_ = [j**3 for j in range(11)]
print(f'\n (4b) Creation example of CUBES list generated {v.yy_}with list comprehension {v.W_}'
      f'  is this \n\t{my_4th_list_}\n')

#(5a) range as an iterable
string_05 = f'hello'
my_5th_list = [string_05 for _ in range(10)]
print(f'\n (5a) Creation example of list generated by range() {v.yy_}with list comprehension {v.W_}'
      f'is this \n\t{my_5th_list}\n')

#(5b) range as an iterable
my_ranged_list = list(range(10))
print(f'\n (5b) Creation example of list {v.yy_}generated by list(range()){v.W_}'
      f'is this \n\t{my_ranged_list}\n')

#(6a) Slicing
print(f'\n (6a) {v.yy_}SLICING{v.W_} using [2:5] of the list of above example (5b) is this\n\t{my_ranged_list[2:5]}\n')

print(f'\n (6b) {v.yy_}SLICING{v.W_} using [::-1] of the list of above example (5b) is this\n\t{my_ranged_list[::-1]}\n')
print(f'\n (6c) {v.yy_}SLICING{v.W_} using [-1:-4:-2] of the list of above example (5b) is this\n\t{my_ranged_list[-1:-4:-2]}\n')

#(7a) List shuffling
display_id = '(007)'   #-- print GUI box for aside number 007
fn.sl1(display_id, f'{v.g_}▉', 78)      #-- get the sl1 function from the funcs module !!!
fn.slm(msg.aside_007, f'{v.g_}▉▉')  #-- middle line uses text fetched from the messages module !!!!
fn.sl2(f'{v.g_}▉', 80)

frame_id = '007'
prefix = 'msg.aside_007'  #-- warning: this is just a 'string', not a variable name (not a pointer)!

test_shuffled_list = list('ABCDEFGHIJK')
print(test_shuffled_list)
shuffle(test_shuffled_list) #-- see https://www.geeksforgeeks.org/python/python-ways-to-shuffle-a-list/
print(f'The shuffled SAME list is as follows\n', test_shuffled_list)
list_of_nameStrings = [prefix[4:] + n for n in test_shuffled_list] #-- remove 'msg.' bc gotten() specifies msg
print(f'The list of concatenated strings is this\n\t{list_of_nameStrings}')

# mssgs_list_007= [msg.prefix+n for n in test_shuffled_list]
#fn.outp_in_mssgs('aside_', frame_id, 'A-K') #--note: logic error here was fixed
fn.outp_in_list(list_name = list_of_nameStrings, colors = 'GREEN', indent=10)
print('\n')

breakpoint()